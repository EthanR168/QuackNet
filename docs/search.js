window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "quacknet", "modulename": "quacknet", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "quacknet.activationDerivativeFunctions", "modulename": "quacknet.activationDerivativeFunctions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "quacknet.activationDerivativeFunctions.ReLUDerivative", "modulename": "quacknet.activationDerivativeFunctions", "qualname": "ReLUDerivative", "kind": "function", "doc": "<p>Applies Leaky Rectified Linear Unit (ReLU) derivative activation function.</p>\n\n<p>Args:\n    values (ndarray): Input array to differantiate.</p>\n\n<p>Returns:\n    ndarray: Array with Leaky ReLU derivative applied to it.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.activationDerivativeFunctions.sigmoid", "modulename": "quacknet.activationDerivativeFunctions", "qualname": "sigmoid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.activationDerivativeFunctions.SigmoidDerivative", "modulename": "quacknet.activationDerivativeFunctions", "qualname": "SigmoidDerivative", "kind": "function", "doc": "<p>Applies sigmoid derivative activation function.</p>\n\n<p>Args:\n    values (ndarray): Input array to differantiate.</p>\n\n<p>Returns:\n    ndarray: Array with sigmoid derivative applied to it.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.activationDerivativeFunctions.TanHDerivative", "modulename": "quacknet.activationDerivativeFunctions", "qualname": "TanHDerivative", "kind": "function", "doc": "<p>Applies hyperbolic tangent (tanh) derivative activation function.</p>\n\n<p>Args:\n    values (ndarray): Input array to differantiate.</p>\n\n<p>Returns:\n    ndarray: Array with tanh derivative applied to it.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.activationDerivativeFunctions.LinearDerivative", "modulename": "quacknet.activationDerivativeFunctions", "qualname": "LinearDerivative", "kind": "function", "doc": "<p>Applies linear derivative activation function.</p>\n\n<p>Args:\n    values (ndarray): Input array to differantiate.</p>\n\n<p>Returns:\n    ndarray: Array with linear derivative applied to it.    </p>\n\n<p>Note:\n    the derivative is the list but every element is 1.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.activationDerivativeFunctions.SoftMaxDerivative", "modulename": "quacknet.activationDerivativeFunctions", "qualname": "SoftMaxDerivative", "kind": "function", "doc": "<p>Applies softmax derivative activation function.</p>\n\n<p>Args:\n    trueValue (ndarray): True labels for the input.\n    values (ndarray): Predicted softmax output array.</p>\n\n<p>Returns:\n    ndarray: Array with softmax derivative applied to it.    </p>\n\n<p>Note:\n    this library forces cross entropy if softmax is used so it simplifies to: values - trueValue</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">trueValue</span>, </span><span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.activationFunctions", "modulename": "quacknet.activationFunctions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "quacknet.activationFunctions.relu", "modulename": "quacknet.activationFunctions", "qualname": "relu", "kind": "function", "doc": "<p>Applies Leaky Rectified Linear Unit (ReLU) activation function.</p>\n\n<p>Args:\n    values (ndarray): Input array to apply leaky ReLU to.\n    alpha (float, optional): Slope for negative values. Default is 0.01.</p>\n\n<p>Returns:\n    ndarray: Array with Leaky ReLU applied to it.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span>, </span><span class=\"param\"><span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.01</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.activationFunctions.sigmoid", "modulename": "quacknet.activationFunctions", "qualname": "sigmoid", "kind": "function", "doc": "<p>Applies the sigmoid activation function.</p>\n\n<p>Args:\n    values (ndarray): Input array to apply sigmoid.</p>\n\n<p>Returns:\n    ndarray: Array with sigmoid applied to it.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.activationFunctions.tanH", "modulename": "quacknet.activationFunctions", "qualname": "tanH", "kind": "function", "doc": "<p>Applies the hyperbolic tangent (tanh) activation function.</p>\n\n<p>Args:\n    values (ndarray): Input array to apply tanh.</p>\n\n<p>Returns:\n    ndarray: Array with tanh applied to it.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.activationFunctions.linear", "modulename": "quacknet.activationFunctions", "qualname": "linear", "kind": "function", "doc": "<p>Applies the linear activation function.</p>\n\n<p>Args:\n    values (ndarray): Input array.</p>\n\n<p>Returns:\n    ndarray: Output array (same as input).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.activationFunctions.softMax", "modulename": "quacknet.activationFunctions", "qualname": "softMax", "kind": "function", "doc": "<p>Applies the softmax activation function.</p>\n\n<p>Args:\n    values (ndarray): Input array to apply softmax.</p>\n\n<p>Returns:\n    ndarray: Array with softmax applied to it. </p>\n\n<p>Note:\n    The function handles overflow by subtracting the maximum value from inputs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.backPropgation", "modulename": "quacknet.backPropgation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalBackpropagation", "modulename": "quacknet.convulationalBackpropagation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalBackpropagation.CNNbackpropagation", "modulename": "quacknet.convulationalBackpropagation", "qualname": "CNNbackpropagation", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalFeutures", "modulename": "quacknet.convulationalFeutures", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalFeutures.ConvulationalNetwork", "modulename": "quacknet.convulationalFeutures", "qualname": "ConvulationalNetwork", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalManager", "modulename": "quacknet.convulationalManager", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalManager.CNNModel", "modulename": "quacknet.convulationalManager", "qualname": "CNNModel", "kind": "class", "doc": "<p></p>\n", "bases": "quacknet.convulationalOptimiser.CNNoptimiser"}, {"fullname": "quacknet.convulationalManager.CNNModel.__init__", "modulename": "quacknet.convulationalManager", "qualname": "CNNModel.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">NeuralNetworkClass</span></span>)</span>"}, {"fullname": "quacknet.convulationalManager.CNNModel.layers", "modulename": "quacknet.convulationalManager", "qualname": "CNNModel.layers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalManager.CNNModel.weights", "modulename": "quacknet.convulationalManager", "qualname": "CNNModel.weights", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalManager.CNNModel.biases", "modulename": "quacknet.convulationalManager", "qualname": "CNNModel.biases", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalManager.CNNModel.NeuralNetworkClass", "modulename": "quacknet.convulationalManager", "qualname": "CNNModel.NeuralNetworkClass", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalManager.CNNModel.addLayer", "modulename": "quacknet.convulationalManager", "qualname": "CNNModel.addLayer", "kind": "function", "doc": "<p>Adds a layer to the CNN model.</p>\n\n<p>Args:\n    layer (class): ConvLayer, PoolingLayer, ActivationLayer, and DenseLayer</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">layer</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.convulationalManager.CNNModel.forward", "modulename": "quacknet.convulationalManager", "qualname": "CNNModel.forward", "kind": "function", "doc": "<p>Performs a forward pass through all layers.</p>\n\n<p>Args:\n    inputTensor (ndarray): Input data tensor to the CNN.</p>\n\n<p>Returns:\n    list: List of tensors output by each layer including the input.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputTensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.convulationalManager.CNNModel.train", "modulename": "quacknet.convulationalManager", "qualname": "CNNModel.train", "kind": "function", "doc": "<p>Trains the CNN for one epoch and calculates accuracy and average loss.</p>\n\n<p>Args:\n    inputData (ndarray): All the training data.\n    labels (ndarray): All the true labels for the training data.\n    useBatches (bool): Whether to use batching.\n    batchSize (int): Size of batches.\n    alpha (float, optional): Learning rate. Default is 0.001.\n    beta1 (float, optional): Adam's beta1 parameter. Default is 0.9.\n    beta2 (float, optional): Adam's beta2 parameter. Default is 0.999.\n    epsilon (float, optional): Adam's epsilon parameter. Default is 1e-8.</p>\n\n<p>Returns:\n    float: accuracy percentage.\n    float: average loss.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">inputData</span>,</span><span class=\"param\">\t<span class=\"n\">labels</span>,</span><span class=\"param\">\t<span class=\"n\">useBatches</span>,</span><span class=\"param\">\t<span class=\"n\">batchSize</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">beta1</span><span class=\"o\">=</span><span class=\"mf\">0.9</span>,</span><span class=\"param\">\t<span class=\"n\">beta2</span><span class=\"o\">=</span><span class=\"mf\">0.999</span>,</span><span class=\"param\">\t<span class=\"n\">epsilon</span><span class=\"o\">=</span><span class=\"mf\">1e-08</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.convulationalManager.CNNModel.createWeightsBiases", "modulename": "quacknet.convulationalManager", "qualname": "CNNModel.createWeightsBiases", "kind": "function", "doc": "<p>Initialises weights and biases for convolutional and dense layers.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.convulationalManager.CNNModel.saveModel", "modulename": "quacknet.convulationalManager", "qualname": "CNNModel.saveModel", "kind": "function", "doc": "<p>Saves model weights and biases to a compressed npz file.</p>\n\n<p>Args:\n    NNweights (list): Weights of the dense neural network layers.\n    NNbiases (list): Biases of the dense neural network layers.\n    CNNweights (list): Weights of the convolutional layers.\n    CNNbiases (list): Biases of the convolutional layers.\n    filename (str, optional): Filename to save the weights. Default is \"modelWeights.npz\".</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">NNweights</span>,</span><span class=\"param\">\t<span class=\"n\">NNbiases</span>,</span><span class=\"param\">\t<span class=\"n\">CNNweights</span>,</span><span class=\"param\">\t<span class=\"n\">CNNbiases</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;modelWeights.npz&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.convulationalManager.CNNModel.loadModel", "modulename": "quacknet.convulationalManager", "qualname": "CNNModel.loadModel", "kind": "function", "doc": "<p>Loads model weights and biases from a compressed npz file and assigns them to layers.</p>\n\n<p>Args:\n    neuralNetwork (class): The dense neural network to load weights into.\n    filename (str, optional): Filename to save the weights. Default is \"modelWeights.npz\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">neuralNetwork</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;modelWeights.npz&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.convulationalManager.ConvLayer", "modulename": "quacknet.convulationalManager", "qualname": "ConvLayer", "kind": "class", "doc": "<p></p>\n", "bases": "quacknet.convulationalFeutures.ConvulationalNetwork, quacknet.convulationalBackpropagation.CNNbackpropagation"}, {"fullname": "quacknet.convulationalManager.ConvLayer.__init__", "modulename": "quacknet.convulationalManager", "qualname": "ConvLayer.__init__", "kind": "function", "doc": "<p>Initialises a convolutional layer.</p>\n\n<p>Args:\n    kernalSize (int): The size of the covolution kernel (assumed it is a square).\n    depth (int): Depth of the input tensor.\n    numKernals (int): Number of kernels in this layer.\n    stride (int): The stride length for convolution.\n    padding (str or int, optional): Padding size or \"no\" for no padding. Default is \"no\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">kernalSize</span>, </span><span class=\"param\"><span class=\"n\">depth</span>, </span><span class=\"param\"><span class=\"n\">numKernals</span>, </span><span class=\"param\"><span class=\"n\">stride</span>, </span><span class=\"param\"><span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"s1\">&#39;no&#39;</span></span>)</span>"}, {"fullname": "quacknet.convulationalManager.ConvLayer.kernalSize", "modulename": "quacknet.convulationalManager", "qualname": "ConvLayer.kernalSize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalManager.ConvLayer.numKernals", "modulename": "quacknet.convulationalManager", "qualname": "ConvLayer.numKernals", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalManager.ConvLayer.kernalWeights", "modulename": "quacknet.convulationalManager", "qualname": "ConvLayer.kernalWeights", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalManager.ConvLayer.kernalBiases", "modulename": "quacknet.convulationalManager", "qualname": "ConvLayer.kernalBiases", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalManager.ConvLayer.depth", "modulename": "quacknet.convulationalManager", "qualname": "ConvLayer.depth", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalManager.ConvLayer.stride", "modulename": "quacknet.convulationalManager", "qualname": "ConvLayer.stride", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalManager.ConvLayer.padding", "modulename": "quacknet.convulationalManager", "qualname": "ConvLayer.padding", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalManager.ConvLayer.forward", "modulename": "quacknet.convulationalManager", "qualname": "ConvLayer.forward", "kind": "function", "doc": "<p>Performs a forward convolution pass.</p>\n\n<p>Args:\n    inputTensor (ndarray): Input tensor to convolve.</p>\n\n<p>Returns:\n    ndarray: Output tensor after convolution.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputTensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.convulationalManager.PoolingLayer", "modulename": "quacknet.convulationalManager", "qualname": "PoolingLayer", "kind": "class", "doc": "<p></p>\n", "bases": "quacknet.convulationalBackpropagation.CNNbackpropagation"}, {"fullname": "quacknet.convulationalManager.PoolingLayer.__init__", "modulename": "quacknet.convulationalManager", "qualname": "PoolingLayer.__init__", "kind": "function", "doc": "<p>Initialises a pooling layer.</p>\n\n<p>Args:\n    gridSize (int): The size of the pooling window.\n    stride (int): The stride length for pooling.\n    mode (str, optional): Pooling mode of \"max\", \"ave\" (average), or \"gap\" (global average pooling). Default is \"max\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">gridSize</span>, </span><span class=\"param\"><span class=\"n\">stride</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;max&#39;</span></span>)</span>"}, {"fullname": "quacknet.convulationalManager.PoolingLayer.gridSize", "modulename": "quacknet.convulationalManager", "qualname": "PoolingLayer.gridSize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalManager.PoolingLayer.stride", "modulename": "quacknet.convulationalManager", "qualname": "PoolingLayer.stride", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalManager.PoolingLayer.mode", "modulename": "quacknet.convulationalManager", "qualname": "PoolingLayer.mode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalManager.PoolingLayer.forward", "modulename": "quacknet.convulationalManager", "qualname": "PoolingLayer.forward", "kind": "function", "doc": "<p>Performs forward pooling operation.</p>\n\n<p>Args:\n   inputTensor (ndarray): Input tensor to pool.</p>\n\n<p>Returns:\n    ndarray: Output tensor after pooling.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputTensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.convulationalManager.DenseLayer", "modulename": "quacknet.convulationalManager", "qualname": "DenseLayer", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalManager.DenseLayer.__init__", "modulename": "quacknet.convulationalManager", "qualname": "DenseLayer.__init__", "kind": "function", "doc": "<p>Initialises a dense layer using a NeuralNetworkClass.</p>\n\n<p>Args:\n    NeuralNetworkClass (class): the fully connected neural network class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">NeuralNetworkClass</span></span>)</span>"}, {"fullname": "quacknet.convulationalManager.DenseLayer.NeuralNetworkClass", "modulename": "quacknet.convulationalManager", "qualname": "DenseLayer.NeuralNetworkClass", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalManager.DenseLayer.orignalShape", "modulename": "quacknet.convulationalManager", "qualname": "DenseLayer.orignalShape", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalManager.DenseLayer.forward", "modulename": "quacknet.convulationalManager", "qualname": "DenseLayer.forward", "kind": "function", "doc": "<p>Flattens the input tensor and performs a forward pass.</p>\n\n<p>Args:\n    inputTensor (ndarray): Input tensor to flatten and process.</p>\n\n<p>Returns:\n    ndarray: Output of the dense layer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputTensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.convulationalManager.ActivationLayer", "modulename": "quacknet.convulationalManager", "qualname": "ActivationLayer", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalManager.ActivationLayer.forward", "modulename": "quacknet.convulationalManager", "qualname": "ActivationLayer.forward", "kind": "function", "doc": "<p>Applies the Leaky ReLU activation function to the input tensor.</p>\n\n<p>Args:\n    inputTensor (ndarray): A 3D array representing the input.</p>\n\n<p>Returns:\n    ndarray: A tensor with the same shape as the input with Leaky ReLU applied to it.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputTensor</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.convulationalOptimiser", "modulename": "quacknet.convulationalOptimiser", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "quacknet.convulationalOptimiser.CNNoptimiser", "modulename": "quacknet.convulationalOptimiser", "qualname": "CNNoptimiser", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "quacknet.dataAugmentation", "modulename": "quacknet.dataAugmentation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "quacknet.dataAugmentation.Augementation", "modulename": "quacknet.dataAugmentation", "qualname": "Augementation", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "quacknet.dataAugmentation.Augementation.hotEncodeLabels", "modulename": "quacknet.dataAugmentation", "qualname": "Augementation.hotEncodeLabels", "kind": "function", "doc": "<p>Converts a list of integer labels into one hot encoded format</p>\n\n<p>Args:\n    allLabels (list of lists): All of the labels of the input data.\n    numClasses (int): The total number of classes.</p>\n\n<p>Returns:\n    list of ndarray: a 2D array of hot encoded labels.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">allLabels</span>, </span><span class=\"param\"><span class=\"n\">numClasses</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.dataAugmentation.Augementation.getImagePaths", "modulename": "quacknet.dataAugmentation", "qualname": "Augementation.getImagePaths", "kind": "function", "doc": "<p>Retrieves paths of all image files in a directory and its subdirectories.</p>\n\n<p>Args:\n    folderPath (str): The path to the directory containing images.\n    extensions (list of str, optional): A list of file extensions to get as images. Default is ['.jpg', '.png', '.jpeg'].</p>\n\n<p>Returns:\n    list of str: A list of full paths to image files.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">folderPath</span>, </span><span class=\"param\"><span class=\"n\">extensions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;.jpg&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;.png&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;.jpeg&#39;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.dataAugmentation.Augementation.preprocessImages", "modulename": "quacknet.dataAugmentation", "qualname": "Augementation.preprocessImages", "kind": "function", "doc": "<p>Loads and preprocesses images by resising and normalising them.</p>\n\n<p>Args:\n    imagePaths (list of str): A list of full paths to image files.\n    targetSize (tuple of int, optional): The desired size of the output images (width, height). Default is (128, 128).</p>\n\n<p>Returns:\n    ndarray: A list of preprocessed images with values normalised between 0 to 1.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">imagePaths</span>, </span><span class=\"param\"><span class=\"n\">targetSize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.dataAugmentation.Augementation.dataAugmentation", "modulename": "quacknet.dataAugmentation", "qualname": "Augementation.dataAugmentation", "kind": "function", "doc": "<p>Performs basic data augmentation by flipping horizontally and vertically.</p>\n\n<p>Args:\n    images (ndarray): A list of images to augment</p>\n\n<p>Returns:\n    ndarray: A list containing the augmented and original images.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">images</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.initialisers", "modulename": "quacknet.initialisers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "quacknet.initialisers.Initialisers", "modulename": "quacknet.initialisers", "qualname": "Initialisers", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "quacknet.initialisers.Initialisers.createWeightsAndBiases", "modulename": "quacknet.initialisers", "qualname": "Initialisers.createWeightsAndBiases", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.lossDerivativeFunctions", "modulename": "quacknet.lossDerivativeFunctions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "quacknet.lossDerivativeFunctions.MSEDerivative", "modulename": "quacknet.lossDerivativeFunctions", "qualname": "MSEDerivative", "kind": "function", "doc": "<p>Calculates the derivative of the Mean Squared Error (MSE) loss function.</p>\n\n<p>Args:\n    value (ndarray): The predicted values from the model.\n    trueValue (ndarray): The true target values.\n    sizeOfLayer (int): The size of the output layer.</p>\n\n<p>Returns:\n    ndarray: The gradients of the MSE loss.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">trueValue</span>, </span><span class=\"param\"><span class=\"n\">sizeOfLayer</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.lossDerivativeFunctions.MAEDerivative", "modulename": "quacknet.lossDerivativeFunctions", "qualname": "MAEDerivative", "kind": "function", "doc": "<p>Calculates the derivative of the Mean Absolute Error (MAE) loss function.</p>\n\n<p>Args:\n    value (ndarray): The predicted values from the model.\n    trueValue (ndarray): The true target values.\n    sizeOfLayer (int): The size of the output layer.</p>\n\n<p>Returns:\n    ndarray: The gradients of the MAE loss.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">trueValue</span>, </span><span class=\"param\"><span class=\"n\">sizeOfLayer</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.lossDerivativeFunctions.CrossEntropyLossDerivative", "modulename": "quacknet.lossDerivativeFunctions", "qualname": "CrossEntropyLossDerivative", "kind": "function", "doc": "<p>Calculates the derivative of the Cross Entropy loss function.</p>\n\n<p>Args:\n    value (ndarray): The predicted values from the model.\n    trueValue (ndarray): The true target values.\n    activationDerivative (function): The derivative of the activation function.</p>\n\n<p>Returns:\n    ndarray: The gradients of the Cross Entropy loss.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span>, </span><span class=\"param\"><span class=\"n\">trueVale</span>, </span><span class=\"param\"><span class=\"n\">activationDerivative</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.lossFunctions", "modulename": "quacknet.lossFunctions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "quacknet.lossFunctions.MSELossFunction", "modulename": "quacknet.lossFunctions", "qualname": "MSELossFunction", "kind": "function", "doc": "<p>Calculates the Mean Squared Error (MSE) loss.</p>\n\n<p>Args:\n    predicted (list / ndarray): The predicted values from the model.\n    true (list / ndarray): The true target values.</p>\n\n<p>Returns:\n    float: The mean squared error between predicted and true values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">predicted</span>, </span><span class=\"param\"><span class=\"n\">true</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.lossFunctions.MAELossFunction", "modulename": "quacknet.lossFunctions", "qualname": "MAELossFunction", "kind": "function", "doc": "<p>Calculates the Mean Absolute Error (MAE) loss.</p>\n\n<p>Args:\n    predicted (list / ndarray): The predicted values from the model.\n    true (list / ndarray): The true target values.</p>\n\n<p>Returns:\n    float: The mean absolute error between predicted and true values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">predicted</span>, </span><span class=\"param\"><span class=\"n\">true</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.lossFunctions.CrossEntropyLossFunction", "modulename": "quacknet.lossFunctions", "qualname": "CrossEntropyLossFunction", "kind": "function", "doc": "<p>Calculates the Cross Entropy loss.</p>\n\n<p>Args:\n    predicted (list / ndarray): The predicted probabilities from the model.\n    true (list / ndarray): The true target values.</p>\n\n<p>Returns:\n    float: The cross entropy loss between predicted probabilities and true values.</p>\n\n<p>Notes:\n    Predicted probabilities are clipped to the range [1e-10, 1-1e-10] to avoid numerical instability.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">predicted</span>, </span><span class=\"param\"><span class=\"n\">true</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.main", "modulename": "quacknet.main", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "quacknet.main.Network", "modulename": "quacknet.main", "qualname": "Network", "kind": "class", "doc": "<p></p>\n", "bases": "quacknet.optimisers.Optimisers, quacknet.initialisers.Initialisers, quacknet.writeAndReadWeightBias.writeAndRead, quacknet.convulationalManager.CNNModel, quacknet.dataAugmentation.Augementation"}, {"fullname": "quacknet.main.Network.__init__", "modulename": "quacknet.main", "qualname": "Network.__init__", "kind": "function", "doc": "<p>Args:\n    lossFunc (str): Loss function name ('mse', 'mae', 'cross'). Default is \"MSE\".\n    learningRate (float, optional): Learning rate for training. Default is 0.01.\n    optimisationFunc (str, optional): Optimisaztion method ('gd', 'sgd', 'batching'). Default is \"gd\".\n    useMomentum (bool, optional): Wether to use momentum in optimisation. Default is False.\n    momentumCoefficient (float, optional): Momentum coefficient if used. Default is 0.9.\n    momentumDecay (float, optional): Decay rate for momentum. Default is 0.99.\n    useBatches (bool, optional): Wether to use mini batches. Default is False.\n    batchSize (int, optional): size of mini batches. Default is 32.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">lossFunc</span><span class=\"o\">=</span><span class=\"s1\">&#39;MSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">learningRate</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">optimisationFunc</span><span class=\"o\">=</span><span class=\"s1\">&#39;gd&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">useMomentum</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">momentumCoefficient</span><span class=\"o\">=</span><span class=\"mf\">0.9</span>,</span><span class=\"param\">\t<span class=\"n\">momentumDecay</span><span class=\"o\">=</span><span class=\"mf\">0.99</span>,</span><span class=\"param\">\t<span class=\"n\">useBatches</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">batchSize</span><span class=\"o\">=</span><span class=\"mi\">32</span></span>)</span>"}, {"fullname": "quacknet.main.Network.layers", "modulename": "quacknet.main", "qualname": "Network.layers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.main.Network.weights", "modulename": "quacknet.main", "qualname": "Network.weights", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.main.Network.biases", "modulename": "quacknet.main", "qualname": "Network.biases", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.main.Network.learningRate", "modulename": "quacknet.main", "qualname": "Network.learningRate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.main.Network.lossFunction", "modulename": "quacknet.main", "qualname": "Network.lossFunction", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.main.Network.optimisationFunction", "modulename": "quacknet.main", "qualname": "Network.optimisationFunction", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.main.Network.useMomentum", "modulename": "quacknet.main", "qualname": "Network.useMomentum", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.main.Network.momentumCoefficient", "modulename": "quacknet.main", "qualname": "Network.momentumCoefficient", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.main.Network.momentumDecay", "modulename": "quacknet.main", "qualname": "Network.momentumDecay", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.main.Network.velocityWeight", "modulename": "quacknet.main", "qualname": "Network.velocityWeight", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.main.Network.velocityBias", "modulename": "quacknet.main", "qualname": "Network.velocityBias", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.main.Network.useBatches", "modulename": "quacknet.main", "qualname": "Network.useBatches", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.main.Network.batchSize", "modulename": "quacknet.main", "qualname": "Network.batchSize", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "quacknet.main.Network.addLayer", "modulename": "quacknet.main", "qualname": "Network.addLayer", "kind": "function", "doc": "<p>Add a layer to the network with the specified number of nodes and activation function.</p>\n\n<p>Args:\n    size (int): Number of nodes in the new layer.\n    activationFunction (str, optional): Activation function name ('relu', 'sigmoid', 'linear', 'tanh', 'softmax'). Default is \"relu\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">size</span>, </span><span class=\"param\"><span class=\"n\">activationFunction</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.main.Network.forwardPropagation", "modulename": "quacknet.main", "qualname": "Network.forwardPropagation", "kind": "function", "doc": "<p>Perform forward propagation through the network for the given input data.</p>\n\n<p>Args:\n    inputData (list): Input data for the network.</p>\n\n<p>Returns:\n    list of ndarray: List containing outputs of each layer including input layer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputData</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.main.Network.train", "modulename": "quacknet.main", "qualname": "Network.train", "kind": "function", "doc": "<p>Train the neural network using the specified optimisation function.</p>\n\n<p>Args:\n    inputData (list of lists): All of the training input data\n    labels (list of ndarray): All of the labels for all the input data.\n    epochs (int): Number of training epochs.</p>\n\n<p>Returns:\n    float: Average accauracy over all epochs.\n    float: Average loss over all epochs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputData</span>, </span><span class=\"param\"><span class=\"n\">labels</span>, </span><span class=\"param\"><span class=\"n\">epochs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.main.Network.drawGraphs", "modulename": "quacknet.main", "qualname": "Network.drawGraphs", "kind": "function", "doc": "<p>Plot training accuracy and loss graphs over epochs for multiple runs.</p>\n\n<p>Args:\n    allAccuracy (list of lists): Accuracy at each epoch for each run.\n    allLoss (list of lists): Loss at each epoch for each run.</p>\n\n<p>Displays:\n    Matplotlib plots of accuracy and loss trends.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">allAccuracy</span>, </span><span class=\"param\"><span class=\"n\">allLoss</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.optimisers", "modulename": "quacknet.optimisers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "quacknet.optimisers.Optimisers", "modulename": "quacknet.optimisers", "qualname": "Optimisers", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "quacknet.writeAndReadWeightBias", "modulename": "quacknet.writeAndReadWeightBias", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "quacknet.writeAndReadWeightBias.writeAndRead", "modulename": "quacknet.writeAndReadWeightBias", "qualname": "writeAndRead", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "quacknet.writeAndReadWeightBias.writeAndRead.write", "modulename": "quacknet.writeAndReadWeightBias", "qualname": "writeAndRead.write", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pathToWeight</span><span class=\"o\">=</span><span class=\"s1\">&#39;ExampleCode/MNISTExample/WeightsAndBiases/weights.txt&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">pathToBias</span><span class=\"o\">=</span><span class=\"s1\">&#39;ExampleCode/MNISTExample/WeightsAndBiases/biases.txt&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "quacknet.writeAndReadWeightBias.writeAndRead.read", "modulename": "quacknet.writeAndReadWeightBias", "qualname": "writeAndRead.read", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pathToWeight</span><span class=\"o\">=</span><span class=\"s1\">&#39;ExampleCode/MNISTExample/WeightsAndBiases/weights.txt&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">pathToBias</span><span class=\"o\">=</span><span class=\"s1\">&#39;ExampleCode/MNISTExample/WeightsAndBiases/biases.txt&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();